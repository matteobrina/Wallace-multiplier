library ieee;
use ieee.std_logic_1164.all;

entity testbenchf is
end entity testbenchf;

architecture test of testbenchf is
signal x, y: std_logic_vector(3 downto 0);
signal p: std_logic_vector(7 downto 0);
signal p2: std_logic_vector(7 downto 0);
signal carry_out: std_logic;
signal carry_out2: std_logic;

begin

mul0: entity work.wallace2(struct) generic map(50 ps, 80 ps, 60 ps)
port map(x, y, p, carry_out);
mul2: entity work.mulb(behav)
port map(x, y, p2, carry_out2);


pr: process 
begin
wait for 100 ps;
x<="1101";
y<="0111";
wait for 1500 ps;
x<="1110";
y<="0101";
wait for 1500 ps;
x<="0000";
y<="0010";
wait for 1500 ps;
x<="1000";
y<="0011";
wait for 1500 ps;
x<="0100";
y<="0001";
wait for 1500 ps;
x<="1101";
y<="1110";
wait for 1500 ps;
x<="1010";
y<="1101";
wait for 1500 ps;
x<="1101";
y<="1010";
wait for 1500 ps;
x<="1101";
y<="0100";
wait for 1500 ps;
x<="1111";
y<="0000";
wait for 1500 ps;
x<="0001";
y<="0111";
wait for 1500 ps;
x<="1101";
y<="1100";
wait for 1500 ps;
x<="1110";
y<="0010";
wait for 1500 ps;
x<="0110";
y<="0001";
wait for 1500 ps;
x<="0011";
y<="0100";
wait for 1500 ps;
x<="1100";
y<="0111";
wait for 1500 ps;
x<="0010";
y<="0001";
wait for 1500 ps;
x<="1001";
y<="0011";
wait for 1500 ps;
x<="1110";
y<="1111";
wait for 1500 ps;
x<="0101";
y<="0111";
wait for 1500 ps;
x<="1001";
y<="1011";
wait for 1500 ps;
x<="1111";
y<="1111";
wait;

end process;
end architecture test;